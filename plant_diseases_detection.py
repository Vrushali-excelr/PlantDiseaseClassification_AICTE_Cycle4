# -*- coding: utf-8 -*-
"""Plant Diseases Detection

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bP5GA_1oeZbPxYmgFuQmYXaHc07dhhhe
"""

import kagglehub

# Download latest version
path = kagglehub.dataset_download("vipoooool/new-plant-diseases-dataset")

print("Path to dataset files:", path)

#!pip install opencv
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os
import seaborn as sns
import cv2
import glob as gb
import tensorflow as tf

train='/root/.cache/kagglehub/datasets/vipoooool/new-plant-diseases-dataset/versions/2/New Plant Diseases Dataset(Augmented)/New Plant Diseases Dataset(Augmented)/train'

size =224
train_generator=tf.keras.preprocessing.image.ImageDataGenerator(
    rotation_range=90,
    width_shift_range=0.0,
    height_shift_range=0.0,
    shear_range=0.0,
    horizontal_flip=True,
    vertical_flip=True,
    zoom_range=0.0,
    rescale=1./255,
    preprocessing_function=None,
    validation_split=0.1
).flow_from_directory(
    train,
    target_size=(size,size),
    batch_size=64,
    class_mode='categorical',
    color_mode='rgb',
    subset='training',
    shuffle=True,
)

train_generator.class_indices

classes=list(train_generator.class_indices.keys())
plt.figure(figsize=(20,20))
for x_batch,y_batch in train_generator:
    for i in range(0,16):
        plt.subplot(4,4,i+1)
        plt.imshow(x_batch[i])
        plt.imshow(x_batch[i])
        plt.title(classes[np.argmax(y_batch[i])])
        plt.grid(True)
    plt.tight_layout(
        pad=0.4,
        h_pad=0.5,
        w_pad=0.5,
        rect=(0, 0, 1, 0.9)
    )
    plt.show()
    break

valid='/root/.cache/kagglehub/datasets/vipoooool/new-plant-diseases-dataset/versions/2/New Plant Diseases Dataset(Augmented)/New Plant Diseases Dataset(Augmented)/valid'

valid_generator=tf.keras.preprocessing.image.ImageDataGenerator(
    rescale=1/255.0,
    preprocessing_function=None,
    validation_split=0.1
).flow_from_directory(
    valid,
    target_size=(size,size),
    batch_size=164,
    class_mode='categorical',
    color_mode='rgb',
    subset='validation',
    shuffle=False
)

test='/root/.cache/kagglehub/datasets/vipoooool/new-plant-diseases-dataset/versions/2/New Plant Diseases Dataset(Augmented)/New Plant Diseases Dataset(Augmented)/valid'

test_generator=tf.keras.preprocessing.image.ImageDataGenerator(
    rescale=1/255,
    preprocessing_function=None,
).flow_from_directory(
    test,
    target_size=(224,224),
    batch_size=164,
    class_mode='categorical',
    color_mode='rgb',
    shuffle=False
)

classes=list(test_generator.class_indices.keys())
plt.figure(figsize=(20,20))
for x_batch,y_batch in test_generator:
    for i in range(0,16):
        plt.subplot(4,4,i+1)
        plt.imshow(x_batch[i])
        plt.imshow(x_batch[i])
        plt.title(classes[np.argmax(y_batch[i])])
        plt.grid(True)
    plt.tight_layout(
        pad=0.4,
        h_pad=0.5,
        w_pad=0.5,
        rect=(0, 0, 1, 0.9)
    )
    plt.show()
    break

from tensorflow import keras
model=keras.models.Sequential()

model.add(keras.layers.Conv2D(filters=32,kernel_size=7,strides=1,padding='same',activation='relu',name="Conv1",input_shape=(224,224,3)))
model.add(keras.layers.MaxPool2D(pool_size=2,name="Pool1"))

model.add(keras.layers.Conv2D(filters=64,kernel_size=3,strides=1,padding='same',activation='relu',name="Conv2"))
model.add(keras.layers.MaxPool2D(pool_size=2,name="Pool2"))

model.add(keras.layers.Conv2D(filters=128,kernel_size=3,strides=1,padding='same',activation='relu',name="Conv3"))
model.add(keras.layers.MaxPool2D(pool_size=2,name="Pool3"))

model.add(keras.layers.Conv2D(filters=256,kernel_size=3,strides=1,padding='same',activation='relu',name="Conv4"))

model.add(keras.layers.Flatten(name='Flatten1'))
model.add(keras.layers.Dense(128,activation='relu',name='Dense1'))
tf.keras.layers.Dropout(0.5)
model.add(keras.layers.Dense(64,activation='relu',name='Dense2'))
tf.keras.layers.Dropout(0.5)
model.add(keras.layers.Dense(38,activation='softmax',name='Output'))
print(model.summary())

from tensorflow.keras.callbacks import EarlyStopping,ModelCheckpoint, ReduceLROnPlateau
early_stopping=EarlyStopping(monitor='val_loss',patience=15,restore_best_weights=True)
model_checkpoint=ModelCheckpoint('best_model.keras',monitor='val_loss',save_best_only=True)
reduce_lr=ReduceLROnPlateau(monitor='val_loss',factor=0.1,patience=5,min_lr=0.00000)
callbacks=[early_stopping,model_checkpoint,reduce_lr]

model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy','precision','recall'])

history=model.fit(train_generator,epochs=5,validation_data=valid_generator,callbacks=callbacks)

import seaborn as sns
acc=history.history['accuracy']
val_acc=history.history['val_accuracy']

precision=history.history['precision']
val_precision=history.history['val_precision']

recall=history.history['recall']
val_recall=history.history['val_recall']

loss=history.history['loss']
val_loss=history.history['val_loss']
epochs=range(1,len(loss)+1)

plt.plot(epochs,acc,'b',label='Training Accuracy')
plt.plot(epochs,val_acc,'r',label='Validation Accuracy')
plt.title('Training and Validation Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.ylim(0,1.02)
plt.figure()
plt.show()

model_evaluate=model.evaluate(test_generator)
print("loss",model_evaluate[0])
print("accuracy",model_evaluate[1])
print("precision",model_evaluate[2])
print("recall",model_evaluate[3])

#save the model
model.save('cnn_model.keras')